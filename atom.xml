<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Toonen.io</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://toonen.io/"/>
  <updated>2017-02-08T22:07:11.000Z</updated>
  <id>https://toonen.io/</id>
  
  <author>
    <name>Peter Toonen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Azure Functions put to use</title>
    <link href="https://toonen.io/2017/02/08/azure-functions-put-to-use/"/>
    <id>https://toonen.io/2017/02/08/azure-functions-put-to-use/</id>
    <published>2017-02-08T20:16:27.000Z</published>
    <updated>2017-02-08T22:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>At work we run an application which is event-driven and utilizes microservices across several trust boundaries. The application originated from our ‘automate everything you do more than twice’-mantra and is now continuously evolving and making our live as a small DevOps team easier.</p>
<p>The underlying messaging mechanism of our app is an Azure Service Bus (or actually, multiple buses), with several topics and subscriptions upon those topics. As all of our events flow through Azure already, it’s easy to store them in blobstorage and use them for auditing/analysis/what-have-you at a later point in time. Now that the usage is increasing, we felt that it was time to add some alerting and we made plans for a new service that would react to our ‘ActivityFailed’-event, it would then send an email as soon as one of those events (luckily they don’t occur that often) would occur. Sounds easy enough, right?</p>
<h1 id="Dockerize-or-…"><a href="#Dockerize-or-…" class="headerlink" title="Dockerize or … ?"></a>Dockerize or … ?</h1><p>As you may know Docker is a great tool to envelope your application into a well-known and well-described format so that it can run anywhere the same as it would on your machine. We would develop the service in .NET Core, so it would be easy enough to Dockerize it and host it somewhere just like some of the other services. But last night I thought to myself ‘Wait, we run in Azure, use the Azure Service Bus and only need to react to messages on the bus..’ and I decided I would try to create an <a href="https://azure.microsoft.com/en-us/services/functions/" target="_blank" rel="external">Azure Function</a> to react to the event and send me the mail. It literally took me about 15 minutes to develop. I’ll describe the process below.</p>
<h2 id="Going-serverless"><a href="#Going-serverless" class="headerlink" title="Going serverless"></a>Going serverless</h2><p>Azure Functions are a way to process events in an easy way without having to worry about where you run it. It’s basically ‘just code’ and Azure does the rest for you. I had played with Azure Functions before, but didn’t really find a use-case for it. I do however feel that they are the next step after containerization. It may not fit all problems, but there are certainly use-cases out there which would benefit from a completely serverless architecture.</p>
<p>Step one is going to the <a href="https://portal.azure.com" target="_blank" rel="external">Azure Portal</a> and creating a new ‘Function App’. Tip: use a consumption plan if you only want to be billed for your actual usage.</p>
<img src="/2017/02/08/azure-functions-put-to-use/create-function-app.png" alt="Creating the Function App" title="Creating the Function App"> 
<p>Once your Function App is created, navigate to it. The first time you navigate to your Function App, you won’t have any functions yet, so you will be presented with the Quickstart Wizard. We will not use it, so scroll down and click ‘Create your own custom function’.</p>
<img src="/2017/02/08/azure-functions-put-to-use/create-your-own-function.png" alt="Create your own custom function" title="Create your own custom function"> 
<p>Now from the template gallery, select C# as language and ‘Data Processing’ as scenario. Click the ‘ServiceBusTopicTrigger-CSharp’ template and enter the following values in the corresponding fields:</p>
<ul>
<li><strong>Name</strong>: a meaningful name for your function, pick something like ‘EmailNotifier’</li>
<li><strong>Topic name</strong>: this is the name of the topic on your service bus which you’ll listen to</li>
<li><strong>Subscription name</strong>: The subscription name on top of the topic specified above</li>
<li><strong>Access Rights</strong>: select ‘Manage’, and make this match the <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-shared-access-signature-authentication" target="_blank" rel="external">SAS Token</a>. As of writing this post, there’s a <a href="https://github.com/Azure/azure-webjobs-sdk-script/issues/1048" target="_blank" rel="external">bug</a> preventing you from using the expected ‘Listen’ permissions. That is - you can use it, but your function will cease to trigger after a few hours.</li>
<li><strong>Service Bus connection</strong>: Service Bus connection strings are saved as Application Setting for your entire Function App and can be shared over multiple functions. Just click ‘new’ the first time and enter the connection string <em>without</em> the EntityPath in it</li>
</ul>
<p>You will now have a basic function. Congratulations!</p>
<h2 id="Making-it-do-something-useful"><a href="#Making-it-do-something-useful" class="headerlink" title="Making it do something useful"></a>Making it do something useful</h2><p>In order to do something meaningful with our app, we’ll need to go through a few steps. First let’s discover what is created for us. Click the ‘Files’ button on the top right of the editor:</p>
<img src="/2017/02/08/azure-functions-put-to-use/your-first-function.png" alt="Exploring your first function" title="Exploring your first function"> 
<p>You will see that you have two files:</p>
<ul>
<li>function.json - which describes your in- and outputs</li>
<li>run.csx - which is the code for your function</li>
</ul>
<p>Take some time to familiarize you with both files and notice that the run.csx isn’t much different from a regular C# program.</p>
<p>It actually has using statements and a <code>public static void Main()</code> alike function called ‘Run’. Azure Functions provides you with framework libraries such as System and System.Linq and you can include some additional assemblies using the <code>#r</code> directive. A full list of all available assemblies can be found <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp#importing-namespaces" target="_blank" rel="external">here</a>. As you can see, using all types/methods within the Microsoft.ServiceBus namespace will be easy. I can just add a the following lines of code to the beginning of run.csx:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#r &quot;Microsoft.ServiceBus&quot;</div><div class="line"></div><div class="line">using Microsoft.Servicebus;</div></pre></td></tr></table></figure>
<p>I also will be using Newtonsoft.Json to deserialize my messages and SendGrid to send my emails, so I will need some way to restore the NuGet packages. This turns out to be quite easy. I just have to add a new file and tell my function what my dependencies are. Add a file called <code>project.json</code> to your function like so:</p>
<img src="/2017/02/08/azure-functions-put-to-use/add-file-to-function.png" alt="Adding a file" title="Adding a file"> 
<p>Now add the following code to it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;frameworks&quot;: &#123;</div><div class="line">    &quot;net46&quot;:&#123;</div><div class="line">      &quot;dependencies&quot;: &#123;</div><div class="line">        &quot;Sendgrid&quot;: &quot;8.0.5&quot;,</div><div class="line">        &quot;Newtonsoft.Json&quot;: &quot;9.0.1&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This will trigger my function to perform a NuGet restore before executing my function for the first time. Don’t forget to add the using statements to your code.</p>
<p>We’re almost ready to get the code done but first we’ll need to add an output to our function. Head to the ‘Integrate’ section of your function and take note of the ‘Message parameter name’, we will use this later on. Now click ‘New Output’ and select ‘SendGrid’ (currently in preview).</p>
<img src="/2017/02/08/azure-functions-put-to-use/integrate-tab.png" alt="Integrate" title="Integrate"> 
<p>The easiest way to utilize this output, is to enter the from, to, subject and API key here. Mind you that the API key is the name of an Application Setting which contains the actual key! </p>
<img src="/2017/02/08/azure-functions-put-to-use/sendgrid-config.png" alt="Configurate SendGrid" title="Configurate SendGrid"> 
<p>Save the changes and then add the Application Setting corresponding to the API key name (SendGridApiKey in this example) by clicking ‘Function App Settings’ and then ‘Configure app setings’<br>Once you’ve added the input, take a look at your <code>function.json</code> and see how it reflects the changes. </p>
<p>Finally adjust the code for run.csx to reflect your application logic. Notice how I named the ‘Message parameter name’ incomingMessage and added an <code>out Mail message</code> to the method signature:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#r &quot;SendGrid&quot;</div><div class="line">#r &quot;Newtonsoft.Json&quot;</div><div class="line">#r &quot;Microsoft.ServiceBus&quot;</div><div class="line"></div><div class="line">using SendGrid.Helpers.Mail;</div><div class="line">using Newtonsoft.Json;</div><div class="line">using System;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using Microsoft.ServiceBus.Messaging;</div><div class="line"></div><div class="line">public static void Run(BrokeredMessage incomingMessage, TraceWriter log, out Mail message)</div><div class="line">&#123;</div><div class="line">    message = null; // set output to null, it must be set as it is a mandatory out parameter</div><div class="line">    </div><div class="line">    var msgBody = incomingMessage.GetBody&lt;string&gt;();</div><div class="line">    var msg = JsonConvert.DeserializeObject&lt;dynamic&gt;(msgBody);</div><div class="line">    </div><div class="line">    log.Info($&quot;Event type: &#123;msg.messageType&#125;&quot;);</div><div class="line"></div><div class="line">    if(msg.messageType == &quot;activityFailed&quot;) &#123;</div><div class="line">         log.Info($&quot;Found a failed activity: &#123;msg.processId&#125;&quot;);</div><div class="line"></div><div class="line">         message = new Mail();</div><div class="line"></div><div class="line">         var messageContent = new Content(&quot;text/html&quot;, $&quot;Activity Failed: &#123;msg.processId&#125;&quot;);</div><div class="line">         message.AddContent(messageContent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s it. Click Run and your message will be parsed, checked and you will be alerted in case something goes wrong :-)</p>
<h1 id="The-result"><a href="#The-result" class="headerlink" title="The result"></a>The result</h1><p>I’ve already received my first alert - even though I triggered it intentionally, it’s still awesome to see that I now have a low-cost, easy to use solution which only runs when it should. Of course there optimizations to be made, but for now it does the trick. And in the meanwhile I’ve learned some more about Azure Functions </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At work we run an application which is event-driven and utilizes microservices across several trust boundaries. The application originate
    
    </summary>
    
      <category term="Cloud" scheme="https://toonen.io/categories/Cloud/"/>
    
    
      <category term="Azure" scheme="https://toonen.io/tags/Azure/"/>
    
      <category term="Serverless" scheme="https://toonen.io/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>Git in VS2017 with self-signed SSL</title>
    <link href="https://toonen.io/2016/11/28/git-in-vs2017-with-self-signed-ssl/"/>
    <id>https://toonen.io/2016/11/28/git-in-vs2017-with-self-signed-ssl/</id>
    <published>2016-11-28T11:00:47.000Z</published>
    <updated>2016-11-28T12:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>When I’m out of the office, I connect to my team’s TFS server through the firewall and get served up with a properly signed (by a widely trusted CA) SSL certificate.<br>This means that my browser, and git have no issues connecting and cloning. When I’m in the office <em>and</em> connected to our corporate WiFi network, I get a self-signed SSL certificate. </p>
<p>It’s always been a hassle to add these certificates to Git’s local certificate store but luckily Visual Studio didn’t require you to do the same, seeing as they used Lib2Git. With VS2017, Microsoft switched to git.exe (which is good) <strong>but</strong> they aren’t using the one already on your path but rather a bundled installation which resides in the VS2017 extensions directory. This means that you have to add SSL certificates to yet another git trusted store.</p>
<h2 id="Let’s-fix"><a href="#Let’s-fix" class="headerlink" title="Let’s fix"></a>Let’s fix</h2><p>Microsoft has done a <a href="terrific write-up">https://blogs.msdn.microsoft.com/phkelley/2014/01/20/adding-a-corporate-or-self-signed-certificate-authority-to-git-exes-store/</a> of how to add a certificates should be added to your git.exe client and now this must be applied to Visual Studio as well to prevent this from happening:</p>
<img src="/2016/11/28/git-in-vs2017-with-self-signed-ssl/git-clone-error.png" alt="Error cloning with untrusted certificate" title="Error cloning with untrusted certificate">
<p>The Git client resides in your VS2017 installation dir, which by default is <code>C:\Program Files (x86)\Microsoft Visual Studio\2017\</code>. Now if you browse to your edition (i.e. ‘Enterprise’), you will see the familiar <code>Common7\IDE</code> directory and then to the <code>CommonExtensions\Microsoft\TeamFoundation\Team Explorer\Git\mingw32\ssl\certs</code> folder, you will find the ca-bundle.crt that Visual Studio uses. So the full path (for a default installation of VS2017 Enterprise) would be:</p>
<p><code>C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer\Git\mingw32\ssl\certs</code></p>
<p>Add your Base64 encoded certificate and the next time you attempt to clone a repo within VS2017, you should be presented with the trusted VS logo ASCII art from TFS:</p>
<img src="/2016/11/28/git-in-vs2017-with-self-signed-ssl/git-clone-vslogo-ascii.png" alt="Visual Studio ASCII art logo Git" title="Visual Studio ASCII art logo Git">
<p>Hope this saves you a bit of trouble ;-)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When I’m out of the office, I connect to my team’s TFS server through the firewall and get served up with a properly signed (by a widely 
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://toonen.io/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Coretainers</title>
    <link href="https://toonen.io/2016/11/16/coretainers/"/>
    <id>https://toonen.io/2016/11/16/coretainers/</id>
    <published>2016-11-16T19:56:02.000Z</published>
    <updated>2016-11-16T21:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Most people, if not everyone, have seen the .NET Core demo’s in a Docker container on Linux by now. Some may even have experimented with Windows containers and the full fledged .NET framework as I showed at the <a href="https://www.sdn.nl" target="_blank" rel="external">SDN Event</a> in September.<br>The thing is, that if you haven’t looked at containers by now, you’re in for a treat. Where it used to be quite hard to figure everything out for yourself, Microsoft announced a new way of integrating today and are taking it to the next level in Visual Studio 2017. Especially when you combine the power of containers with the flexibility of .NET Core.</p>
<h1 id="Docker-made-easy"><a href="#Docker-made-easy" class="headerlink" title="Docker made easy"></a>Docker made easy</h1><p>The combination of .NET Core and containers is very powerful. It gives a small iamge, which runs anywhere. You can literally ship your ‘machine’ and today it became even easier.<br>Starting with Visual Studio 2017, when you create a web application, you can enable Docker support from the box:</p>
<img src="/2016/11/16/coretainers/docker-support.png" alt="Built-in Docker support" title="Built-in Docker support"> 
<p>If you have <a href="https://docs.docker.com/docker-for-windows/" target="_blank" rel="external">Docker for Windows</a> installed, you can get going. If not, install it first.<br>This will automatically generate several files for you:</p>
<ul>
<li>Dockerfile (where it all starts)</li>
<li>docker-compose.yml (compose your containers, more on this in a future post)</li>
<li>docker-compose.ci.build.yml (instructions for a CI build)</li>
</ul>
<p>This will be all you need to get going. Really, that’s it. Just press ‘F5’ (or click the debug button, which now conventiently says ‘Docker’).<br>Visual Studio will now start building your application and put it into a container. The best part here is that it will link your source files on disk into the container by using <a href="https://docs.docker.com/engine/tutorials/dockervolumes/" target="_blank" rel="external">volumes</a>. If you inspect the docker-compose.vs.debug.yml file, you can clearly see the line that says:</p>
<p><code>- .:/app</code> </p>
<p>what this line does, is that it links the current directory to the /app directory within the container. This means you can edit your code (and views) live, refresh your browser and it’ll update the app that you’re running <em>within</em> the container. The best thing is though, you can set breakpoints and they work just as though it was an application running on your local dev machine.</p>
<p><em>Mind you</em>: if your debug experience didn’t go quite as planned and you run into an error. You might just see something like this in the output window:</p>
<p><code>ERROR: for awesomewebapp  Cannot create container for service awesomewebapp: D: drive is not shared. Please share it in Docker for Windows Settings</code></p>
<p>Although the error message is quite verbose nowadays, right-click the Docker icon in your taskbar and go to settings. Now on the ‘Shared Drives’ tab, you can share the disk where your application resides. </p>
<h1 id="Publish-to-Azure"><a href="#Publish-to-Azure" class="headerlink" title="Publish to Azure"></a>Publish to Azure</h1><p>Now where it get’s really awesome, is that starting today you can publish your container to Azure with a few simple clicks. If you right-click your project, you can press ‘Publish’. We all know this action from years of publishing web applications through <a href="https://www.iis.net/downloads/microsoft/web-deploy" target="_blank" rel="external">WebDeploy</a> - and we all know what joy that brought ;-)<br>We then got the ability to quickly select ‘host in Azure’ when we created the project and now we have this:</p>
<img src="/2016/11/16/coretainers/publish-to-azure.png" alt="Publish Container to Azure" title="Publish Container to Azure"> 
<p>The settings are simple:</p>
<ul>
<li>Provide a unique name for your app</li>
<li>Select an Azure Subscription</li>
<li>Select a resource group, or create one</li>
<li>Select or create an App Service Plan</li>
<li>Select or create a Docker registry</li>
</ul>
<p>I’m assuming you’re familiar with Azure terms such as the resource group and service plan, but the last one deserves a bit of explanation. A Docker registry is like a repository where your containers are stored. You can have both private and public registries - DockerHub being the most famous one. By default this will create a private registry where you can store the different versions of your container.</p>
<p>Press the ‘create’ button. Visual Studio and Azure will do the rest for you, it’s that simple.</p>
<p><em>Mind you</em>: make sure that both your app service plan and registry are in the same Azure region. As of writing this post, only West US is supported. You can select the region from the ‘Services’ tab and then pressing the gears next to the app service or registry you’re creating.</p>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>After pushing the ‘create’ button, my container got published to Azure and I’m able to access it from my browser. And although this is of course an awesome way to publish your application, this is probably not what you want from a DevOps perspective. You want to be able to make a change to the app, commit and push your changes to the repo and have an automated build/release pipeline to put your changes in production… and you can!<br>That’s what another new option in VS2017 does for you:</p>
<img src="/2016/11/16/coretainers/configure-continuous-delivery.png" alt="Continuous Delivery from VS2017" title="Continuous Delivery from VS2017"> 
<p>More on this feature in a later post though. For now, experiment with the containers and new features you have and I’ll show you how to automatically create a CI/CD pipeline from right within Visual Studio in a future post.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Most people, if not everyone, have seen the .NET Core demo’s in a Docker container on Linux by now. Some may even have experimented with 
    
    </summary>
    
      <category term="DevOps" scheme="https://toonen.io/categories/DevOps/"/>
    
    
      <category term="Docker" scheme="https://toonen.io/tags/Docker/"/>
    
      <category term="Connect" scheme="https://toonen.io/tags/Connect/"/>
    
      <category term="Containers" scheme="https://toonen.io/tags/Containers/"/>
    
      <category term="DevOps" scheme="https://toonen.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>New Blog</title>
    <link href="https://toonen.io/2016/07/09/new-blog/"/>
    <id>https://toonen.io/2016/07/09/new-blog/</id>
    <published>2016-07-09T21:09:34.000Z</published>
    <updated>2016-07-09T23:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>So as you may have noticed, I have started a new blog. It’s been a long time coming but I finally found some time this weekend. My colleague <a href="http://defaultconstructor.com" title="Edwin van Wijk" target="_blank" rel="external">Edwin van Wijk</a> tipped me off on using <a href="http://hexo.io" title="Hexo" target="_blank" rel="external">hexo</a> quite a while ago and I seem to have gotten the hang of it. This blog itself is still a work in progress and I’ll be migrating old posts over soon, but in the meanwhile I figured I’d share some tips.</p>
<h2 id="Free-Blog"><a href="#Free-Blog" class="headerlink" title="Free Blog"></a>Free Blog</h2><p>As you might know, <a href="https://github.com" title="GitHub" target="_blank" rel="external">GitHub</a> offers you a free website through GitHub Pages. This means that you can host your static website right from GitHub. Combine this with Hexo magic and you can start your own blog quite easily. What you might not know is that you can also add a custom domain to your GitHub page:</p>
<img src="/2016/07/09/new-blog/github-custom-domain.png" alt="Add a custom domain to GitHub pages" title="Add a custom domain to GitHub pages">
<p>Now although this by itself is pretty cool, it gets better. Although it’s possible to use SSL on GitHub pages, this isn’t currently possible when using a custom domain, or is it?</p>
<h2 id="CloudFlare-to-the-rescue"><a href="#CloudFlare-to-the-rescue" class="headerlink" title="CloudFlare to the rescue"></a>CloudFlare to the rescue</h2><p><a href="https://cloudflare.com" title="CloudFlare" target="_blank" rel="external">CloudFlare</a> offers a free tier that not only makes your website faster by using a smart caching mechanism (which you might want to turn off seeing as hexo generates static content), it also offers <strong>free SSL</strong> for all sites. Simply register for a free account on their site, go to the ‘DNS’ tab and add a CNAME for your domain, like so:</p>

<p>For the DNS-savvy, yes, I used a CNAME as my domain’s root, please refer to <a href="https://blog.cloudflare.com/introducing-cname-flattening-rfc-compliant-cnames-at-a-domains-root/" target="_blank" rel="external">this page</a> on details as to why this is still RFC compliant.</p>
<p>Then nagivate to the ‘Crypto’ tab in the menu and set it to the following:</p>
<img src="/2016/07/09/new-blog/cloudflare-crypto.png" alt="Set the Encryption level to Full" title="Set the Encryption level to Full">
<p>Now for the final step, which ensures all your users are automatically redirected to your SSL page, navigate to the ‘Page Rules’ tab and add the following rules (where you replace the domain with your own domain). If you use a sub-domain such as ‘blog.domain.com’, make sure to use two asterisks (*) in the first rule and replace $1 in the rule with $2 so that it will correctly rewrite:</p>
<img src="/2016/07/09/new-blog/cloudflare-page-rules.png" alt="Add Rewrite Rules" title="Add Rewrite Rules">
<p>In case you do want to disable caching to prevent issues with your static site, enable a third rule where you match <a href="https://yourdomain.ext/*" target="_blank" rel="external">https://yourdomain.ext/*</a> and set the action to ‘Cache Level = ByPass’:</p>
<img src="/2016/07/09/new-blog/cloudflare-cache-level-bypass.png" alt="Disable Caching" title="Disable Caching">
<h2 id="Sit-back-and-relax"><a href="#Sit-back-and-relax" class="headerlink" title="Sit back and relax"></a>Sit back and relax</h2><p>That’s it. You’re done. You have just setup your new <strong>secure</strong> site using hexo, GitHub pages and CloudFlare. Of course you can also use this with the Basic Tier in <a href="https://azure.microsoft.com" target="_blank" rel="external">Azure</a> which allows you to use your own custom SSL for just 8 odd euro’s a month ;-)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So as you may have noticed, I have started a new blog. It’s been a long time coming but I finally found some time this weekend. My collea
    
    </summary>
    
      <category term="General" scheme="https://toonen.io/categories/General/"/>
    
    
      <category term="tips-and-tricks" scheme="https://toonen.io/tags/tips-and-tricks/"/>
    
      <category term="freebies" scheme="https://toonen.io/tags/freebies/"/>
    
  </entry>
  
  <entry>
    <title>Bash for Windows</title>
    <link href="https://toonen.io/2016/04/06/bash-for-windows/"/>
    <id>https://toonen.io/2016/04/06/bash-for-windows/</id>
    <published>2016-04-06T20:59:00.000Z</published>
    <updated>2016-07-09T23:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>So last week at //Build/ Microsoft announced native Bash-integration on the Windows 10 platform and today they delivered the first preview. Being a Windows Insider since nearly day 1 – including installing those buggy mobile builds on my daily driver – I still have my daily driver set to the fast ring and I received build 14316 today. After about 30 mins of installation (ymmv), I eagerly logged in and typed ‘bash’. Unfortunately, nothing happened.</p>
<p>Then I realized I had to switch some options on. First you need to enable the ‘developer mode’. You can do this by opening the settings app and selecting the correct option:</p>
<img src="/2016/04/06/bash-for-windows/enable-developer-mode.png" alt="Enable Developer Mode" title="Enable Developer Mode">
<p>Next you can enable the optional windows feature ‘Windows Subsystem for Linux (Beta)’:</p>
<img src="/2016/04/06/bash-for-windows/enable-windows-feature.jpg" alt="Enable Windows Feature" title="Enable Windows Feature">
<p>After a reboot, you can press the windows key and enter ‘bash’. A new prompt will open with the question if you want to install Ubuntu – say what:</p>
<img src="/2016/04/06/bash-for-windows/install-bash.png" alt="Installing Bash... on Windows" title="Installing Bash... on Windows">
<p>And that’s it, you’re root:</p>
<img src="/2016/04/06/bash-for-windows/root-on-windows.png" alt="Root on Windows!" title="Root on Windows!">
<p>A few tips:</p>
<ul>
<li>right click the title bar and go to ‘properties’ enable ‘quick editing’ here, this allows you to copy/paste into the window.</li>
<li>if you’re like me, and you try to install Docker even though you kind of knew it wouldn’t work: it doesn’t work. Luckily there’s an <a href="https://blog.docker.com/2016/03/docker-for-mac-windows-beta/" target="_blank" rel="external">easy integration</a> running a docker host in HyperV just around the corner (and I run the beta already), so no sweat there, just had to try 🙂</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So last week at //Build/ Microsoft announced native Bash-integration on the Windows 10 platform and today they delivered the first previe
    
    </summary>
    
      <category term="General" scheme="https://toonen.io/categories/General/"/>
    
    
      <category term="Windows" scheme="https://toonen.io/tags/Windows/"/>
    
      <category term="Linux" scheme="https://toonen.io/tags/Linux/"/>
    
      <category term="Cross-Platform" scheme="https://toonen.io/tags/Cross-Platform/"/>
    
      <category term="Bash" scheme="https://toonen.io/tags/Bash/"/>
    
      <category term="Docker" scheme="https://toonen.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dev Intersection 2015 - dag 6</title>
    <link href="https://toonen.io/2015/11/09/dev-intersection-2015-dag-6/"/>
    <id>https://toonen.io/2015/11/09/dev-intersection-2015-dag-6/</id>
    <published>2015-11-09T17:01:00.000Z</published>
    <updated>2016-07-09T23:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ook al ben ik inmiddels alweer een tijdje terug uit Las Vegas en inmiddels de jet-lag te boven, wilde ik jullie toch niet mijn laatste dag op Dev Intersection onthouden. Dit was namelijk de dag waar ik het meest naar had uitgekeken.</p>
<p>Ondanks mijn eerdere experimenten met IoT (<a href="http://dotnetflix.com/player/3" target="_blank" rel="external">dotnetFlix aflevering 3</a>) waarbij ik mijn gas- en electriciteitsmeter liet ‘praten’ met het internet en wat andere simpele projectjes, had ik nog steeds niet echt het idee dat ik met IoT bezig was, zo had ik wel een koppeling met Azure gemaakt maar niet de IoT hub gebruikt, geen stream analytics toegepast en geen PowerBI. Dat was nou precies waar mijn laatste workshop over ging: IoT, Azure, PowerBI en dat aangestuurd met <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>!</p>
<img src="/2015/11/09/dev-intersection-2015-dag-6/particle-photon.jpg" alt="Particle Photon" title="Particle Photon">
<p>Gedurende de gehele dag werd ik meegenomen door Doug Seven en zijn team waarbij we in eerste instantie aan de slag gingen met een <a href="https://store.particle.io/?product=particle-photon" target="_blank" rel="external">Particle Photon</a>. Deze mini-module van $19 (zie foto waar hij bovenop een breadboard ligt) is in staat om out-of-the-box te communiceren met wifi en heeft een aantal digitale en analoge poorten aan boord waarmee je kunt communiceren. Plug ‘m in in je PC (of een andere USB power source) en je kunt gaan zodra je jouw particle hebt ‘geclaimt’ via hun cloud service.</p>
<p>Tijdens de workshop wordt uitgelegd dat je op verschillende manieren om kunt gaan met je devices, zo kun je rechtstreeks met het internet communiceren, of je kunt via een gateway-device werken. Zo doen wij dat ook deze dag: via onze pc. Gewapend met een text-editor (ik koos voor <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>), de <a href="http://johnny-five.io/" target="_blank" rel="external">Johnny Five</a> node module en de <a href="https://github.com/spark/particle-cli" target="_blank" rel="external">Particle-cli</a> module, kon ik aan de slag met Node.js. Aangezien er geen ‘hello world’ te outputten was op de module aangezien er geen display op zit, moest een knipperend lampje het doen (dat mijn lampje in morse alsnog ‘hello world’ seinde, laten we maar even buiten beschouwing ;-)). Probeer overigens ook vooral het particle-cli commando ‘nyan’ en ik geef je alvast als tip dat je ook ‘particle-cli nyan off’ kunt doen zonder een reboot te geven.</p>
<p>Gedurende de dag kwamen we steeds verder met onze particles en koppelden we deze aan een <a href="https://github.com/sparkfun/Weather_Shield" target="_blank" rel="external">SparkFun weathershield</a> waarmee een simpel weerstation werd gebouwd. Door deze metrieken vervolgens met behulp van de Azure IoT node-module naar Azure te pushen en deze met een stream analytics job in een Power BI DataSet te gieten, kun je in Power BI vervolgens een mooi dashboard er overheen gieten. Let er hierbij op dat je om PowerBI als output voor je Stream Analytics Job te selecteren, je in de oude huidige Azure portal moet kijken!</p>
<p>Zie hieronder mijn resultaat met op de horizontale as de tijd en verticaal de temperatuur :-)</p>
<img src="/2015/11/09/dev-intersection-2015-dag-6/power-bi-stats.png" alt="Temperatuur" title="Temperatuur">
<p>Al met al was dit een leerzame workshop waar je in korte tijd met een hoop informatie tot je neemt, en je de kans krijgt te werken met de mannen die <a href="http://www.microsoft.com/en-us/server-cloud/customer-stories/Kuka-Robotics.aspx" target="_blank" rel="external">hier</a> achter zitten en ze vragen te stellen. Krijg je dus de kans om een workshop van Doug en de mannen te volgen: grijp ‘m! Kijk op hun <a href="https://thinglabsio.github.io/" target="_blank" rel="external">github</a> voor de code, guides en workshop planning.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ook al ben ik inmiddels alweer een tijdje terug uit Las Vegas en inmiddels de jet-lag te boven, wilde ik jullie toch niet mijn laatste da
    
    </summary>
    
      <category term="Conferences" scheme="https://toonen.io/categories/Conferences/"/>
    
    
      <category term="DevInterSection" scheme="https://toonen.io/tags/DevInterSection/"/>
    
      <category term="Dutch" scheme="https://toonen.io/tags/Dutch/"/>
    
  </entry>
  
  <entry>
    <title>Dev Intersection 2015 - dag 3</title>
    <link href="https://toonen.io/2015/10/28/dev-intersection-2015-dag-3/"/>
    <id>https://toonen.io/2015/10/28/dev-intersection-2015-dag-3/</id>
    <published>2015-10-28T06:38:00.000Z</published>
    <updated>2016-07-09T23:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Samen met Mark Rexwinkel en Edwin van Wijk ben ik deze week aanwezig op de Dev Intersection 2015 conferentie in Las Vegas. Via een dagelijkse blog proberen wij jullie op de hoogte te houden van wat we hier zien en horen. Na <a href="https://blogs.infosupport.com/dev-intersection-2015-dag-1/" target="_blank" rel="external">Edwin</a> en <a href="https://blogs.infosupport.com/dev-intersection-2015-dag-2/" target="_blank" rel="external">Mark</a> ben ik vandaag aan de beurt.</p>
<p>De derde dag van de conferentie was de eerste dag waarop ‘reguliere’ sessies werden gegeven. Na een goed ontbijt, begon de dag met een keynote van Scott Guthrie. Hij vertelde voornamelijk over de ‘Journey to the Cloud’ en deelde Microsoft’s visie op DevOps met <a href="https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs.aspx" target="_blank" rel="external">Visual Studio Online</a>, enkele indrukwekkende cijfers over Azure (wat te denken van 777 biljoen storage queries per dag?!) en de manier waarop Microsoft’s Clouddiensten zoals Office 365 in het grote plaatje van de moderne IT-industrie passen.</p>
<img src="/2015/10/28/dev-intersection-2015-dag-3/devops-on-vso.jpg" alt="DevOps met VSO" title="DevOps met VSO">
<p>Na de keynote zijn we elk onze eigen kant uit gegaan. Ik heb sessies gevolgd van Julie Lerman (Domain Driven Design for the Database Driven Mind), welke erg goed wordt samengevat in een <a href="https://msdn.microsoft.com/en-us/magazine/dn342868.aspx" target="_blank" rel="external">drietal blogposts</a>, een sessie van Steven Murawski (Survive and Thrive in a DevOps World) die erop neer kwam dat het invoeren van DevOps voornamelijk een cultuur-shift is waarbij men de ‘fear culture’ en ‘blame game’ moet laten varen. Hij heeft een flink aantal tips <a href="http://stevenmurawski.com/devops-reading-list/" target="_blank" rel="external">op zijn blog</a> staan om met DevOps aan de slag te gaan.</p>
<p>In de middag ben ik verder gegaan met een sessie van Troy Hunt (Securing ASP.NET in an Azure Environment). Nadat ik zijn workshop had gevolgd op maandag, was ik erg benieuwd wat hij over dit onderwerp had te zeggen en ik werd niet teleurgesteld. Alhoewel het in het begin voornamelijk om no-brainers ging zoals het least-privileged-account principe, kwam hij uiteindelijk tot tips omtrent <a href="https://azure.microsoft.com/en-us/documentation/articles/sql-database-dynamic-data-masking-get-started/" target="_blank" rel="external">dynamic data masking</a> in Azure SQL databases, stipte hij nog even het belang van application settings en connection strings in de Azure portal aan en dat je eigenlijk altijd two step verification aan moet zetten als je met jouw account een Azure subscription gaat beheren. Dit laatste kun je instellen via <a href="https://account.live.com/proofs/Manage" target="_blank" rel="external">accountbeheer</a>.</p>
<p>Al met al was dit weer een geslaagde dag en kijk ik al uit naar morgen!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Samen met Mark Rexwinkel en Edwin van Wijk ben ik deze week aanwezig op de Dev Intersection 2015 conferentie in Las Vegas. Via een dageli
    
    </summary>
    
      <category term="Conferences" scheme="https://toonen.io/categories/Conferences/"/>
    
    
      <category term="DevInterSection" scheme="https://toonen.io/tags/DevInterSection/"/>
    
      <category term="Dutch" scheme="https://toonen.io/tags/Dutch/"/>
    
  </entry>
  
  <entry>
    <title>Custom build tasks in TFS 2015</title>
    <link href="https://toonen.io/2015/07/21/custom-build-tasks-in-tfs-2015/"/>
    <id>https://toonen.io/2015/07/21/custom-build-tasks-in-tfs-2015/</id>
    <published>2015-07-21T12:46:00.000Z</published>
    <updated>2016-07-09T23:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Since I upgraded my team’s private TFS instance to TFS 2015 RC1, followed by RC2, the whole team has been working with TFS 2015 quite a lot. Of course one of the major features is the new build engine and we’ve given that quite a ride. From cross platform builds on Mac and Linux to custom build tasks, we’ve accomplished quite a lot. Seeing as during yesterday’s Visual Studio 2015 launch, Brian Harry stated that it was ‘quite easy’ to build your own tasks, I figured I’d give a short write-down of our experiences with custom tasks.</p>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>From the moment I upgraded our R&amp;D server to RC1, we’ve been working with the new build system. Up until RC2 it was only possible to add custom build tasks, but we weren’t able to remove them. On top of that, the whole process isn’t documented quite yet. Seeing as we quite often add NuGet packages to a feed and didn’t want to add a, not very descriptive, PowerShell task to all of our build definitions, we decided to use this example for a custom task and see how it would fare.</p>
<h2 id="Prerequisite-one-What-is-a-task"><a href="#Prerequisite-one-What-is-a-task" class="headerlink" title="Prerequisite one: What is a task?"></a>Prerequisite one: What is a task?</h2><p>To make a custom build task, we first need to know what it looks like. Luckily Microsoft has open-sourced most of the current build tasks in <a href="https://github.com/Microsoft/vso-agent-tasks" target="_blank" rel="external">https://github.com/Microsoft/vso-agent-tasks</a> which gave us a fair idea of what a build task is:</p>
<ol>
<li>a JSON file describing the plugin</li>
<li>a PowerShell or Node.JS file containing the functionality (this post will focus on PowerShell)</li>
<li>an (optional) icon file</li>
<li>optional resources translating the options to another language</li>
</ol>
<p>Now the only thing we needed to find out was: how to upload these tasks and in what format?</p>
<p>Good to know:</p>
<ol>
<li>To make sure your icon displays correctly, it must be 32×32 pixels</li>
<li>The task ID is a GUID which you need to create yourself</li>
<li>The task category should be an existing category</li>
<li>Visibility tells you what kind of task it is, possible values are: Build, Release and Preview. Currently only Build-type tasks are shown</li>
</ol>
<h2 id="Prerequisite-two-How-to-upload-a-task"><a href="#Prerequisite-two-How-to-upload-a-task" class="headerlink" title="Prerequisite two: How to upload a task?"></a>Prerequisite two: How to upload a task?</h2><p>We quickly figured out that the tasks were simply .zip files containing the aforementioned items, so creating a zip was an easy but then we needed to get it there. By going through the github repository’s, we figured out there was a REST-API which controls all the tasks and we figured that by doing a PUT-call to said endpoint we could create a new task, but also overwrite tasks.</p>
<p>The following powershell-script enables you to upload tasks:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">param</span>(</div><div class="line">   [Parameter(Mandatory=<span class="literal">$true</span>)][string]<span class="variable">$TaskPath</span>,</div><div class="line">   [Parameter(Mandatory=<span class="literal">$true</span>)][string]<span class="variable">$TfsUrl</span>,</div><div class="line">   [PSCredential]<span class="variable">$Credential</span> = (<span class="built_in">Get-Credential</span>),</div><div class="line">   [switch]<span class="variable">$Overwrite</span> = <span class="literal">$false</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># Load task definition from the JSON file</span></div><div class="line"><span class="variable">$taskDefinition</span> = (<span class="built_in">Get-Content</span> <span class="variable">$taskPath</span>\task.json) -join <span class="string">"`n"</span> | <span class="built_in">ConvertFrom-Json</span></div><div class="line"><span class="variable">$taskFolder</span> = <span class="built_in">Get-Item</span> <span class="variable">$TaskPath</span></div><div class="line"></div><div class="line"><span class="comment"># Zip the task content</span></div><div class="line"><span class="built_in">Write-Output</span> <span class="string">"Zipping task content"</span></div><div class="line"><span class="variable">$taskZip</span> = (<span class="string">"&#123;0&#125;\..\&#123;1&#125;.zip"</span> -f <span class="variable">$taskFolder</span>, <span class="variable">$taskDefinition</span>.id)</div><div class="line"><span class="keyword">if</span> (<span class="built_in">Test-Path</span> <span class="variable">$taskZip</span>) &#123; <span class="built_in">Remove-Item</span> <span class="variable">$taskZip</span> &#125;</div><div class="line"></div><div class="line"><span class="built_in">Add-Type</span> -AssemblyName <span class="string">"System.IO.Compression.FileSystem"</span></div><div class="line">[IO.Compression.ZipFile]::CreateFromDirectory(<span class="variable">$taskFolder</span>, <span class="variable">$taskZip</span>)</div><div class="line"></div><div class="line"><span class="comment"># Prepare to upload the task</span></div><div class="line"><span class="built_in">Write-Output</span> <span class="string">"Uploading task content"</span></div><div class="line"><span class="variable">$headers</span> = @&#123; <span class="string">"Accept"</span> = <span class="string">"application/json; api-version=2.0-preview"</span>; <span class="string">"X-TFS-FedAuthRedirect"</span> = <span class="string">"Suppress"</span> &#125;</div><div class="line"><span class="variable">$taskZipItem</span> = <span class="built_in">Get-Item</span> <span class="variable">$taskZip</span></div><div class="line"><span class="variable">$headers</span>.Add(<span class="string">"Content-Range"</span>, <span class="string">"bytes 0-$(<span class="variable">$taskZipItem</span>.Length - 1)/$(<span class="variable">$taskZipItem</span>.Length)"</span>)</div><div class="line"><span class="variable">$url</span> = (<span class="string">"&#123;0&#125;/_apis/distributedtask/tasks/&#123;1&#125;"</span> -f <span class="variable">$TfsUrl</span>, <span class="variable">$taskDefinition</span>.id)</div><div class="line"><span class="keyword">if</span> (<span class="variable">$Overwrite</span>) &#123;</div><div class="line">   <span class="variable">$url</span> += <span class="string">"?overwrite=true"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Actually upload it</span></div><div class="line"><span class="built_in">Invoke-RestMethod</span> -Uri <span class="variable">$url</span> -Credential <span class="variable">$Credential</span> -Headers <span class="variable">$headers</span> -ContentType application/octet-stream -Method Put -InFile <span class="variable">$taskZipItem</span></div></pre></td></tr></table></figure>
<p>Good to know:</p>
<ol>
<li>Currently only ‘Agent Pool Administrators’ are able to add/update or remove tasks.</li>
<li>Tasks are server-wide, this means that you will upload to the server, not to a specific collection or project.</li>
</ol>
<h2 id="Creating-the-actual-task"><a href="#Creating-the-actual-task" class="headerlink" title="Creating the actual task"></a>Creating the actual task</h2><p>So like I said, we’ll be creating a new task that’s going to publish our NuGet packages to a feed. So first we need to decide what information we need to push our packages:</p>
<ol>
<li>The target we want to pack (.csproj or .nuspec file relative to the source-directory)</li>
<li>The package source we want to push to</li>
</ol>
<p>For this example I’m assuming you’re only building for a single build configuration and single target platform, which we’ll use in the PowerShell-script.</p>
<p>First we’ll make the task definition. As I said, this is simply a JSON file describing the task and its inputs.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"id"</span>: <span class="string">"61ed0e1d-efb7-406e-a42b-80f5d22e6d54"</span>,</div><div class="line">   <span class="attr">"name"</span>: <span class="string">"NuGetPackAndPush"</span>,</div><div class="line">   <span class="attr">"friendlyName"</span>: <span class="string">"Nuget Pack and Push"</span>,</div><div class="line">   <span class="attr">"description"</span>: <span class="string">"Packs your output as NuGet package and pushes it to the specified source."</span>,</div><div class="line">   <span class="attr">"category"</span>: <span class="string">"Package"</span>,</div><div class="line">   <span class="attr">"author"</span>: <span class="string">"Info Support"</span>,</div><div class="line">   <span class="attr">"version"</span>: &#123;</div><div class="line">      <span class="attr">"Major"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"Minor"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"Patch"</span>: <span class="number">0</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"minimumAgentVersion"</span>: <span class="string">"1.83.0"</span>,</div><div class="line">   <span class="attr">"inputs"</span>: [</div><div class="line">      &#123;</div><div class="line">         <span class="attr">"name"</span>: <span class="string">"packtarget"</span>,</div><div class="line">         <span class="attr">"type"</span>: <span class="string">"string"</span>,</div><div class="line">         <span class="attr">"label"</span>: <span class="string">"Pack target"</span>,</div><div class="line">         <span class="attr">"defaultValue"</span>: <span class="string">""</span>,</div><div class="line">         <span class="attr">"required"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"helpMarkDown"</span>: <span class="string">"Relative path to .csproj or .nuspec file to pack."</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         <span class="attr">"name"</span>: <span class="string">"packagesource"</span>,</div><div class="line">         <span class="attr">"type"</span>: <span class="string">"string"</span>,</div><div class="line">         <span class="attr">"label"</span>: <span class="string">"Package Source"</span>,</div><div class="line">         <span class="attr">"defaultValue"</span>: <span class="string">""</span>,</div><div class="line">         <span class="attr">"required"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"helpMarkDown"</span>: <span class="string">"The source we want to push the package to"</span></div><div class="line">      &#125;</div><div class="line">   ],</div><div class="line">   <span class="attr">"instanceNameFormat"</span>: <span class="string">"Nuget Pack and Push $(packtarget)"</span>,</div><div class="line">   <span class="attr">"execution"</span>: &#123;</div><div class="line">      <span class="attr">"PowerShell"</span>: &#123;</div><div class="line">         <span class="attr">"target"</span>: <span class="string">"$(currentDirectory)\\PackAndPush.ps1"</span>,</div><div class="line">         <span class="attr">"argumentFormat"</span>: <span class="string">""</span>,</div><div class="line">         <span class="attr">"workingDirectory"</span>: <span class="string">"$(currentDirectory)"</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This version of the task will  be a very rudimentary one, which doesn’t do much (any) validation, so you might want to add that yourself.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">[cmdletbinding()]</div><div class="line"><span class="keyword">param</span></div><div class="line">(</div><div class="line">   [Parameter(Mandatory=<span class="literal">$true</span>)][string] <span class="variable">$packtarget</span>,</div><div class="line">   [Parameter(Mandatory=<span class="literal">$false</span>)][string] <span class="variable">$packagesource</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">####################################################################################################</span></div><div class="line"><span class="comment"># 1 Auto Configuration</span></div><div class="line"><span class="comment">####################################################################################################</span></div><div class="line"></div><div class="line"><span class="comment"># Stop the script on error</span></div><div class="line"><span class="variable">$ErrorActionPreference</span> = <span class="string">"Stop"</span></div><div class="line"></div><div class="line"><span class="comment"># Relative location of nuget.exe to build agent home directory</span></div><div class="line"><span class="variable">$nugetExecutableRelativePath</span> = <span class="string">"Agent\Worker\Tools\nuget.exe"</span></div><div class="line"></div><div class="line"><span class="comment"># These variables are provided by TFS</span></div><div class="line"><span class="variable">$buildAgentHomeDirectory</span> = <span class="variable">$env:AGENT_HOMEDIRECTORY</span></div><div class="line"><span class="variable">$buildSourcesDirectory</span> = <span class="variable">$Env:BUILD_SOURCESDIRECTORY</span></div><div class="line"><span class="variable">$buildStagingDirectory</span> = <span class="variable">$Env:BUILD_STAGINGDIRECTORY</span></div><div class="line"><span class="variable">$buildPlatform</span> = <span class="variable">$Env:BUILDPLATFORM</span></div><div class="line"><span class="variable">$buildConfiguration</span> = <span class="variable">$Env:BUILDCONFIGURATION</span></div><div class="line"></div><div class="line"><span class="variable">$packagesOutputDirectory</span> = <span class="variable">$buildStagingDirectory</span></div><div class="line"></div><div class="line"><span class="comment"># Determine full path of pack target file</span></div><div class="line"><span class="variable">$packTargetFullPath</span> = <span class="built_in">Join-Path</span> -Path <span class="variable">$buildSourcesDirectory</span> -ChildPath <span class="variable">$packTarget</span></div><div class="line"></div><div class="line"><span class="comment"># Determine full path to nuget.exe</span></div><div class="line"><span class="variable">$nugetExecutableFullPath</span> = <span class="built_in">Join-Path</span> -Path <span class="variable">$buildAgentHomeDirectory</span> -ChildPath <span class="variable">$nugetExecutableRelativePath</span></div><div class="line"></div><div class="line"><span class="comment">####################################################################################################</span></div><div class="line"><span class="comment"># 2 Create package</span></div><div class="line"><span class="comment">####################################################################################################</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> <span class="string">"2. Creating NuGet package"</span></div><div class="line"></div><div class="line"><span class="variable">$packCommand</span> = (<span class="string">"pack `"&#123;0&#125;`" -OutputDirectory `"&#123;1&#125;`" -NonInteractive -Symbols"</span> -f <span class="variable">$packTargetFullPath</span>, <span class="variable">$packagesOutputDirectory</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="variable">$packTargetFullPath</span>.ToLower().EndsWith(<span class="string">".csproj"</span>))</div><div class="line">&#123;</div><div class="line">   <span class="variable">$packCommand</span> += <span class="string">" -IncludeReferencedProjects"</span></div><div class="line"></div><div class="line">   <span class="comment"># Remove spaces from build platform, so 'Any CPU' becomes 'AnyCPU'</span></div><div class="line">   <span class="variable">$packCommand</span> += (<span class="string">" -Properties `"Configuration=&#123;0&#125;;Platform=&#123;1&#125;`""</span> -f    <span class="variable">$buildConfiguration</span>, (<span class="variable">$buildPlatform</span> <span class="nomarkup">-replace</span> <span class="string">'\s'</span>,<span class="string">''</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`tPack command: &#123;0&#125;"</span> -f <span class="variable">$packCommand</span>)</div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`tCreating package..."</span>)</div><div class="line"></div><div class="line"><span class="variable">$packOutput</span> = <span class="built_in">Invoke-Expression</span> <span class="string">"&amp;'<span class="variable">$nugetExecutableFullPath</span>' <span class="variable">$packCommand</span>"</span> | <span class="built_in">Out-String</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`tPackage successfully created:"</span>)</div><div class="line"></div><div class="line"><span class="variable">$generatedPackageFullPath</span> = [regex]::match(<span class="variable">$packOutput</span>,<span class="string">"Successfully created package '(.+(?&lt;!\.symbols)\.nupkg)'"</span>).Groups[<span class="number">1</span>].Value</div><div class="line"><span class="built_in">Write-Host</span> `t`t<span class="variable">$generatedPackageFullPath</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`tNote: The created package will be available in the drop location."</span>)</div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> <span class="string">"`tOutput from NuGet.exe:"</span></div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`t`t<span class="variable">$packOutput</span>"</span> <span class="nomarkup">-Replace</span> <span class="string">"`r`n"</span>, <span class="string">"`r`n`t`t"</span>)</div><div class="line"></div><div class="line"><span class="comment">####################################################################################################</span></div><div class="line"><span class="comment"># 3 Publish package</span></div><div class="line"><span class="comment">####################################################################################################</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> <span class="string">"3. Publish package"</span></div><div class="line"><span class="variable">$pushCommand</span> = <span class="string">"push `"&#123;0&#125;`" -Source `"&#123;1&#125;`" -NonInteractive"</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`tPush package '&#123;0&#125;' to '&#123;1&#125;'."</span> -f (<span class="built_in">Split-Path</span> <span class="variable">$generatedPackageFullPath</span> -Leaf), <span class="variable">$packagesource</span>)</div><div class="line"><span class="variable">$regularPackagePushCommand</span> = (<span class="variable">$pushCommand</span> -f <span class="variable">$generatedPackageFullPath</span>, <span class="variable">$packagesource</span>)</div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`tPush command: &#123;0&#125;"</span> -f <span class="variable">$regularPackagePushCommand</span>)</div><div class="line"><span class="built_in">Write-Host</span> <span class="string">"`tPushing..."</span></div><div class="line"></div><div class="line"><span class="variable">$pushOutput</span> = <span class="built_in">Invoke-Expression</span> <span class="string">"&amp;'<span class="variable">$nugetExecutableFullPath</span>' <span class="variable">$regularPackagePushCommand</span>"</span> | <span class="built_in">Out-String</span></div><div class="line"></div><div class="line"><span class="built_in">Write-Host</span> <span class="string">"`tSuccess. Package pushed to source."</span></div><div class="line"><span class="built_in">Write-Host</span> <span class="string">"`tOutput from NuGet.exe:"</span></div><div class="line"><span class="built_in">Write-Host</span> (<span class="string">"`t`t<span class="variable">$pushOutput</span>"</span> <span class="nomarkup">-Replace</span> <span class="string">"`r`n"</span>, <span class="string">"`r`n`t`t"</span>)</div></pre></td></tr></table></figure>
<p>To finish up, don’t forget to add a .png logo to your task ;-)<br>You should now be able to add a custom task to your build pipeline from the “Package” category:</p>
<img src="/2015/07/21/custom-build-tasks-in-tfs-2015/custom-task.png" alt="Custom Task in Package category" title="Custom Task in Package category">
<h2 id="Words-of-warning"><a href="#Words-of-warning" class="headerlink" title="Words of warning"></a>Words of warning</h2><p>Tasks can be versioned, use this to your advantage. All build definitions use the latest available version of a specific task, you can’t change this behavior from the web interface, so always assume the latest version is being used.</p>
<p>If you don’t change the version number of your task when updating it, the build agents that have previously used your task will not download the newer version because the version number is still the same. This means that if you change the behavior of your task, you should always update the version number!</p>
<p>When deleting a task, this task is not automatically removed from current build definitions, on top of that you won’t get a notification when editing the build definition but you will get an exception on executing a build based on that definition.</p>
<p>Tasks are always available for the entire TFS instance, this means that you shouldn’t include credentials or anything that you don’t want others to see. Use ‘secret variables’ for this purpose:</p>
<img src="/2015/07/21/custom-build-tasks-in-tfs-2015/secret-vars.png" alt="Secret Variables" title="Secret Variables">
<h2 id="Further-Reading"><a href="#Further-Reading" class="headerlink" title="Further Reading"></a>Further Reading</h2><p>If you’ve followed this post so far, I recommend you also check out my team member Jonathan’s post/videos (in Dutch) out:</p>
<p><a href="http://blogs.infosupport.com/using-invoke-sqlcmd-in-tfs-build-2015/" target="_blank" rel="external">Blog Post about Invoke SQLCmd in build vNext</a><br><a href="https://www.youtube.com/watch?v=e0U-Ca5ElQQ" target="_blank" rel="external">Video on build vNext (in Dutch)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since I upgraded my team’s private TFS instance to TFS 2015 RC1, followed by RC2, the whole team has been working with TFS 2015 quite a l
    
    </summary>
    
      <category term=".NET" scheme="https://toonen.io/categories/NET/"/>
    
    
      <category term="TFS" scheme="https://toonen.io/tags/TFS/"/>
    
      <category term="Build" scheme="https://toonen.io/tags/Build/"/>
    
      <category term="Customization" scheme="https://toonen.io/tags/Customization/"/>
    
  </entry>
  
  <entry>
    <title>Load testing from the Azure portal</title>
    <link href="https://toonen.io/2015/07/12/load-testing-from-the-azure-portal/"/>
    <id>https://toonen.io/2015/07/12/load-testing-from-the-azure-portal/</id>
    <published>2015-07-12T14:57:00.000Z</published>
    <updated>2016-07-09T23:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Before you launch a new web application, you make sure you have thoroughly tested it, you have performed unit-, integration-, usability- and load-tests but for some reason when the application goes into production, it comes to a grinding halt and you’re left puzzled as to why this happened.</p>
<p>Back in 2013 Microsoft released a solution for this issue: Azure-based load testing which is able to simulate real-world load-testing on your application from Azure with unlimited resources (well, the only real limiting factor is your wallet). The only strange thing here was that in order to use this Azure-based load testing, I had to go to my <a href="https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs.aspx" target="_blank" rel="external">VSO</a> account to start a test instead of just starting a load test in the Azure portal where I published my web application.</p>
<p>This has changed now.</p>
<h2 id="Introducing-Azure-load-testing-from-the-portal"><a href="#Introducing-Azure-load-testing-from-the-portal" class="headerlink" title="Introducing Azure load testing from the portal"></a>Introducing Azure load testing from the portal</h2><p>Yesterday I stumbled onto <a href="http://blogs.msdn.com/b/charles_sterling/archive/2015/07/10/10627246.aspx" target="_blank" rel="external">this post</a> (which contains way more pictures than this post will) by Charles Sterling, where he revealed that as an ‘nascent feature PM’ he more or less accidentally released a new feature into the wild. As of now it’s possible to start a load test from the Azure portal right from where you control your web application. It’s as easy as adding a tile to your web app and starting the test. Or even better, by enabling a feature flag and simply adding a new load test.</p>
<p>To get started, load up your Azure Portal (the new one!) and navigate to one of your web apps and then follow these steps:</p>
<ol>
<li>Right-click the space in between any of the tiles already displayed and click ‘Add Tiles’</li>
<li>Now choose the ‘Operations’ category and select ‘Cloud Load Test’</li>
<li>You will now get a new tile in your web app panel</li>
<li>Click ‘Done’ on the top left</li>
<li>Click the tile and add a new Load Test, enter the VSO account you want to use, the URL and a name for the test. Mind you, the test name can’t contain any spaces or non-alphanumeric characters.</li>
</ol>
<img src="/2015/07/12/load-testing-from-the-azure-portal/azure-load-test.png" alt="Load Test" title="Load Test">
<p>In case you don’t want to add a new tile, you can also include the following feature flag in the portal URL: ?websitesextension_cloudloadtest=true turning the URL into something like: <a href="https://portal.azure.com/?websitesextension_cloudloadtest=true" target="_blank" rel="external">https://portal.azure.com/?websitesextension_cloudloadtest=true</a><br>After doing so, you will be able to access load testing from your web app’s settings option.</p>
<h2 id="Summarizing"><a href="#Summarizing" class="headerlink" title="Summarizing"></a>Summarizing</h2><p>You now have a new way to perform load testing in the Azure portal, snugly in your Web App blade. It is currently lacking some of the features that VSO does offer, such as browser distribution and think time, but who knows, they might just add them before the final version:</p>
<img src="/2015/07/12/load-testing-from-the-azure-portal/vso-more-options.png" alt="VSO has slightly more options" title="VSO has slightly more options">
<p>All in all it’s a nice time-saver and the tests are now in a place where I’d actually expect them to be.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Before you launch a new web application, you make sure you have thoroughly tested it, you have performed unit-, integration-, usability- 
    
    </summary>
    
      <category term="Cloud" scheme="https://toonen.io/categories/Cloud/"/>
    
    
      <category term="Azure" scheme="https://toonen.io/tags/Azure/"/>
    
      <category term="Test" scheme="https://toonen.io/tags/Test/"/>
    
  </entry>
  
</feed>
